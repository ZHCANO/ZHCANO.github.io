<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写数据库连接池</title>
    <link href="/%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <url>/%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>在高并发情况下，如果每次用户访问数据库都需要创建和销毁数据库连接对象，这将导致大量的TCP三次握手、MySQL Server连接认证、MySQL Server关闭连接以及资源回收的操作，这些过程会带来巨大的性能开销。如果在一开始就创建好一些连接对象存放在连接池中，<strong>当用户需要时从连接池中取出，用完时归还，就可以起到资源重用</strong>，从而节省了频繁创建连接销毁连接所花费的时间，提升系统响应的速度。</p><h2 id="连接池功能"><a href="#连接池功能" class="headerlink" title="连接池功能"></a>连接池功能</h2><ul><li><p><strong>初始连接量（initSize）</strong></p><ul><li><p>连接池事先和MySQLServer创建initSize个连接</p></li><li><p>当应用发起MySQL访问时，直接从连接池中获取一个可用的连接，使用完成后归还连接池</p></li></ul></li><li><p><strong>最大连接量（maxSize）</strong></p><ul><li><p>当并发访问MySQL请求增多至超过初始连接量时，连接池会根据数量请求去创建更多的连接。</p></li><li><p>但是连接的数量上限是maxSize，因为连接占用socket资源，如果连接池占用过多的socket资源，那么服务器就不能接收太多的客户端请求了。（连接池和服务器部署在同一台主机上）</p></li></ul></li><li><p><strong>最大空闲时间（maxIdleTime）</strong></p><ul><li>如果新增加的连接在最大空闲时间内都没有被使用，那么这些连接就会被回收</li></ul></li><li><p><strong>连接超时时间（connectionTimeout）</strong></p><ul><li>如果在connectionTimeout内都没有空闲的连接可以使用，那么连接就会失败，无法访问数据库</li></ul></li></ul><h2 id="连接池设计"><a href="#连接池设计" class="headerlink" title="连接池设计"></a>连接池设计</h2><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231212194359092.png"></p><h2 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h2><ul><li>MySQL数据库编程</li><li>单例模式</li><li>C++11多线程编程、生产者-消费者线程模型</li><li>智能指针shared_ptr、lambda表达式</li></ul><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>使用vs2019编写项目代码，由于需要调用MySQL API来完成数据库的连接、查询和更新等操作，需要在vs2019中导入MySQL的头文件、库文件。</p><ol><li><p>VS2019选择X64，因为安装的MySQL是64位的</p><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231212195224271.png"></p></li><li><p>右键项目 - 属性 - C&#x2F;C++ - 常规 - 附加包含目录，填写mysql.h头文件的路径（例如：D:\developer_tools\MySQL\Files\MySQL Server 5.7\include）。注意：先在源文件下创建一个.cpp文件后，下图中C&#x2F;C++的选项才会出现。</p><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231212195956052.png"></p></li><li><p>右键项目 - 属性 - 链接器 - 常规 - 附加库目录，填写libmysql.lib的路径（D:\developer_tools\MySQL\Files\MySQL Server 5.7\lib）</p></li><li><p>右键项目 - 属性 - 链接器 - 输入 - 附加依赖项，填写libmysql.lib库的名字（libmysql.lib）（静态库）</p></li><li><p>把libmysql.dll动态链接库（Linux下后缀名是.so库）放在工程目录下（动态库）</p><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231212200957476.png"></p></li></ol><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><p><strong>创建数据表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> databases pool;<br>use pool;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>(id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">PRIMARY</span> KEY <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    sex ENUM(<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231212201531855.png"></p><p><strong>MySQL C API</strong></p><p>需要包含头文件<code>#include &lt;mysql.h&gt;</code></p><ul><li><p>初始化MySQL连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 成功返回mysql指针，失败返回NULL</span><br>MYSQL *<span class="hljs-title function_">mysql_init</span><span class="hljs-params">(MYSQL *mysql)</span> ;<br></code></pre></td></tr></table></figure></li><li><p>连接MySQL服务器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 成功返回mysql指针，失败返回NULL</span><br>MYSQL * STDCALL <span class="hljs-title function_">mysql_real_connect</span><span class="hljs-params">(MYSQL *mysql, </span><br><span class="hljs-params">                                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *host,   <span class="hljs-comment">// mysql服务器的主机地址</span></span><br><span class="hljs-params">                                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *user,   <span class="hljs-comment">// 登录用户名</span></span><br><span class="hljs-params">                                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *passwd, <span class="hljs-comment">// 登录密码</span></span><br><span class="hljs-params">                                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *db,     <span class="hljs-comment">// 使用的数据库名称</span></span><br><span class="hljs-params">                                <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port,  <span class="hljs-comment">// MySQL端口</span></span><br><span class="hljs-params">                                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *unix_socket,    <span class="hljs-comment">// 本地套接字, 不使用指定为NULL</span></span><br><span class="hljs-params">                                <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> clientflag)</span>;  <span class="hljs-comment">// 连接标志，通常为0</span><br></code></pre></td></tr></table></figure></li><li><p>执行sql语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 执行一个sql语句, 增删查改的sql语句都可以</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mysql_query</span><span class="hljs-params">(MYSQL *mysql, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *query)</span>;<br>参数:<br>    - mysql: mysql_real_connect()的返回值<br>    - query: 一个可以执行的sql语句, 结尾的位置不需要加<span class="hljs-string">&#x27;;&#x27;</span><br>返回值: <br>    - 如果查询成功，返回<span class="hljs-number">0</span>。如果是查询, 结果集在mysql对象中<br>    - 如果出现错误，返回非<span class="hljs-number">0</span>值。<br></code></pre></td></tr></table></figure></li><li><p>获取结果集</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">MYSQL_RES *<span class="hljs-built_in">mysql_use_result</span>(_conn);<br></code></pre></td></tr></table></figure></li><li><p>关闭MySQL</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mysql_close(&amp;mysql);<br></code></pre></td></tr></table></figure></li></ul><p><strong>使用C++封装MySQL C API</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONNECTION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONNECTION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mysql.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;public.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Connection</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 初始化数据库连接</span><br><span class="hljs-built_in">Connection</span>();<br><br><span class="hljs-comment">// 释放数据库连接</span><br>~<span class="hljs-built_in">Connection</span>();<br><br><span class="hljs-comment">// 连接数据库</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">connect</span><span class="hljs-params">(string ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port, string user, string passward, string dbname)</span></span>;<br><br><span class="hljs-comment">// 更新操作insert/delete/update</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">update</span><span class="hljs-params">(string sql)</span></span>;<br><br><span class="hljs-comment">// 查询操作select</span><br><span class="hljs-function">MYSQL_RES* <span class="hljs-title">query</span><span class="hljs-params">(string sql)</span></span>;<br><span class="hljs-keyword">private</span>:<br>MYSQL* conn_; <span class="hljs-comment">// 表示和MySQL Server的一条连接</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Connection.h&quot;</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 实现MySQL数据库的增删改查操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 初始化数据库连接</span><br>Connection::<span class="hljs-built_in">Connection</span>() &#123;<br>conn_ = <span class="hljs-built_in">mysql_init</span>(<span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-comment">// 释放数据库连接</span><br>Connection::~<span class="hljs-built_in">Connection</span>() &#123;<br><span class="hljs-keyword">if</span> (conn_ != <span class="hljs-literal">nullptr</span>)<br><span class="hljs-built_in">mysql_close</span>(conn_);<br>&#125;<br><br><span class="hljs-comment">// 连接数据库</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Connection::connect</span><span class="hljs-params">(string ip, <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> port, string user, string password, string dbname)</span> </span>&#123;<br>MYSQL* p = <span class="hljs-built_in">mysql_real_connect</span>(conn_, ip.<span class="hljs-built_in">c_str</span>(), user.<span class="hljs-built_in">c_str</span>(),<br>password.<span class="hljs-built_in">c_str</span>(), dbname.<span class="hljs-built_in">c_str</span>(), port, <span class="hljs-literal">nullptr</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 输出连接失败原因</span><br>cerr &lt;&lt; <span class="hljs-built_in">mysql_error</span>(conn_) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> p != <span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 更新操作insert/delete/update</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Connection::update</span><span class="hljs-params">(string sql)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">mysql_query</span>(conn_, sql.<span class="hljs-built_in">c_str</span>())) &#123;<br><span class="hljs-built_in">LOG</span>(<span class="hljs-string">&quot;Update Failed:&quot;</span> + sql);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 查询操作select</span><br><span class="hljs-function">MYSQL_RES* <span class="hljs-title">Connection::query</span><span class="hljs-params">(string sql)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">mysql_query</span>(conn_, sql.<span class="hljs-built_in">c_str</span>()))&#123;<br><span class="hljs-built_in">LOG</span>(<span class="hljs-string">&quot;Query Failed:&quot;</span> + sql);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">mysql_use_result</span>(conn_);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试一下效果：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Connection.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Connection conn;<br>string sql = <span class="hljs-string">&quot;insert into user(name,age,sex) values(&#x27;li&#x27;, 21, &#x27;female&#x27;)&quot;</span>;<br>conn.<span class="hljs-built_in">connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">13306</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;pool&quot;</span>);<br>conn.<span class="hljs-built_in">update</span>(sql);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，成功插入一条新数据：</p><p><img src="/./%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/image-20231218193730375.png"></p><h2 id="功能模块实现"><a href="#功能模块实现" class="headerlink" title="功能模块实现"></a>功能模块实现</h2><h3 id="线程安全的懒汉式单例模式"><a href="#线程安全的懒汉式单例模式" class="headerlink" title="线程安全的懒汉式单例模式"></a>线程安全的懒汉式单例模式</h3><p>连接池只需要一个实例，所以ConnectionPool应该按照单例模式设计，即一个类不管创建多少对象，永远只能得到该类型的一个对象实例。单例模式又分为懒汉式单例模式和饿汉式单例模式。相比于懒汉式单例模式，饿汉式单例模式在没有需要获取实例对象前，实例对象就已经产生了，这样会浪费系统资源使启动时间过长。因此，在数据库连接池的设计中，我们使用线程安全的懒汉式单例模式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONNECTIONPOOL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONNECTIONPOOL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Connection.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取类的唯一实例对象的接口方法</span><br><span class="hljs-function"><span class="hljs-type">static</span> ConnectionPool* <span class="hljs-title">getConnectionPool</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 私有化构造函数</span><br><span class="hljs-built_in">ConnectionPool</span>(); <br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ConnectionPool.h&quot;</span></span><br><span class="hljs-comment">// 获取类的唯一实例对象的接口方法</span><br><span class="hljs-function">ConnectionPool* <span class="hljs-title">ConnectionPool::getConnectionPool</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> ConnectionPool pool; <span class="hljs-comment">// 编译器自动lock和unlock</span><br><span class="hljs-keyword">return</span> &amp;pool;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="从配置文件加载配置项"><a href="#从配置文件加载配置项" class="headerlink" title="从配置文件加载配置项"></a>从配置文件加载配置项</h3><ul><li>打开配置文件</li><li>判断文件是否存在</li><li>循环按行读取记录，按&#x3D;和\n分割提取key和value</li><li>给私有成员赋值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 从配置文件加载配置项</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ConnectionPool::loadConfigFile</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 以只读方式打开mysql.ini</span><br>ifstream ifs;<br>ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mysql.ini&quot;</span>, ios::in);<br><br><span class="hljs-comment">// 判断配置文件是否存在</span><br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>()) &#123;<br><span class="hljs-built_in">LOG</span>(<span class="hljs-string">&quot;mysql.ini file is not exist!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 循环按行读取记录，按=和\n分割提取key和value</span><br>string line;<br><span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(ifs, line)) &#123;<br>string str = line;<br><span class="hljs-type">int</span> idx = str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (idx == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 无效的配置项</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-type">int</span> endIdx = str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, idx);<br>string key = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, idx);<br>string value = str.<span class="hljs-built_in">substr</span>(idx + <span class="hljs-number">1</span>, endIdx - idx - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;ip&quot;</span>) &#123;<br>ip_ = value;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;port&quot;</span>) &#123;<br>port_ = <span class="hljs-built_in">stoi</span>(value);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;username&quot;</span>) &#123;<br>username_ = value;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;passward&quot;</span>) &#123;<br>passward_ = value;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;dbname&quot;</span>) &#123;<br>dbname_ = value;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;initSize&quot;</span>) &#123;<br>initSize_ = <span class="hljs-built_in">stoi</span>(value);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;maxSize&quot;</span>) &#123;<br>maxSize_ = <span class="hljs-built_in">stoi</span>(value);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;maxIdleTime&quot;</span>) &#123;<br>maxIdleTime_ = <span class="hljs-built_in">stoi</span>(value);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&quot;connectionTimeout&quot;</span>) &#123;<br>connectionTimeout_ = <span class="hljs-built_in">stoi</span>(value);<br>&#125;<br>&#125;<br>ifs.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="连接池的构造"><a href="#连接池的构造" class="headerlink" title="连接池的构造"></a>连接池的构造</h3><ul><li>加载配置项</li><li>创建初始数量的连接</li><li>启动连接池的生产者线程</li><li>启动连接池定时清理线程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONNECTIONPOOL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONNECTIONPOOL_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Connection.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">// 获取类的唯一实例对象的接口方法</span><br><span class="hljs-function"><span class="hljs-type">static</span> ConnectionPool* <span class="hljs-title">getConnectionPool</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">// 私有化构造函数</span><br><span class="hljs-built_in">ConnectionPool</span>(); <br><br><span class="hljs-comment">// 从配置文件加载配置项</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadConfigFile</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 生产者线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">produceConnectionTask</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 定时清理连接线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">scannerConnectionTask</span><span class="hljs-params">()</span></span>;<br><br>string ip_; <span class="hljs-comment">// ip地址</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> port_; <span class="hljs-comment">// 端口号</span><br>string username_; <span class="hljs-comment">// 用户名</span><br>string passward_; <span class="hljs-comment">// 密码</span><br>string dbname_; <span class="hljs-comment">// 数据库名</span><br><span class="hljs-type">int</span> initSize_; <span class="hljs-comment">// 初始连接量</span><br><span class="hljs-type">int</span> maxSize_; <span class="hljs-comment">// 最大连接量</span><br><span class="hljs-type">int</span> maxIdleTime_; <span class="hljs-comment">// 最大空闲时间</span><br><span class="hljs-type">int</span> connectionTimeout_; <span class="hljs-comment">// 连接超时时间</span><br><br>queue&lt;Connection*&gt; connectionQue_; <span class="hljs-comment">// 存储 mysql 连接的队列</span><br>mutex queueMutex_; <span class="hljs-comment">// 维护连接队列线程安全的互斥锁</span><br>atomic_int connectionCnt_; <span class="hljs-comment">// 记录创建的连接的总数量</span><br>condition_variable cv; <span class="hljs-comment">// 设置条件变量，用于连接生产者线程和消费者线程的通信</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 连接池的构造</span><br>ConnectionPool::<span class="hljs-built_in">ConnectionPool</span>() &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">loadConfigFile</span>()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 创建初始数量的连接</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; initSize_; i++) &#123;<br>Connection* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Connection</span>();<br>p-&gt;<span class="hljs-built_in">connect</span>(ip_, port_, username_, passward_, dbname_);<br>connectionQue_.<span class="hljs-built_in">push</span>(p);<br>connectionCnt_++;<br>&#125;<br><br><span class="hljs-comment">// 启动连接池的生产者线程</span><br><span class="hljs-function">thread <span class="hljs-title">produce</span><span class="hljs-params">(bind(&amp;ConnectionPool::produceConnectionTask, <span class="hljs-keyword">this</span>))</span></span>;<br>produce.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-comment">// 启动连接池定时清理连接线程</span><br><span class="hljs-function">thread <span class="hljs-title">scanner</span><span class="hljs-params">(bind(&amp;ConnectionPool::scannerConnectionTask, <span class="hljs-keyword">this</span>))</span></span>;<br>scanner.<span class="hljs-built_in">detach</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者线程"><a href="#生产者线程" class="headerlink" title="生产者线程"></a>生产者线程</h3><p><strong>作用：</strong>生产连接</p><ul><li>作为类的成员方法，可以很方便地访问类的成员变量<ul><li>由于线程函数是C接口的方法，因此传递函数时需要用绑定器将this指针绑定到生产者线程上</li></ul></li><li>加锁</li><li>连接池队列不空时，进入等待状态</li><li>连接池队列为空时，生产连接</li><li>通知消费者线程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 启动连接池的生产者线程</span><br><span class="hljs-function">thread <span class="hljs-title">produce</span><span class="hljs-params">(bind(&amp;ConnectionPool::produceConnectionTask, <span class="hljs-keyword">this</span>))</span></span>;<br>produce.<span class="hljs-built_in">detach</span>();<br><br><span class="hljs-comment">// 生产者线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConnectionPool::produceConnectionTask</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-function">unique_lock&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(queueMutex_)</span></span>;<br><br><span class="hljs-comment">// 连接池队列不空，生产者线程进入等待状态</span><br><span class="hljs-keyword">while</span> (!connectionQue_.<span class="hljs-built_in">size</span>())<br>cv.<span class="hljs-built_in">wait</span>(lock);<br><br><span class="hljs-comment">// 连接数量没有达到上限，继续生产新的连接</span><br><span class="hljs-keyword">if</span> (connectionCnt_ &lt; maxSize_) &#123;<br>Connection* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Connection</span>();<br>p-&gt;<span class="hljs-built_in">connect</span>(ip_, port_, username_, passward_, dbname_);<br>connectionQue_.<span class="hljs-built_in">push</span>(p);<br>connectionCnt_++;<br>&#125;<br><br><span class="hljs-comment">// 通知消费者线程获取连接</span><br>cv.<span class="hljs-built_in">notify_all</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者线程"><a href="#消费者线程" class="headerlink" title="消费者线程"></a>消费者线程</h3><p><strong>作用：</strong>提供给外部的接口，从连接池中获取一个可用的空闲连接。返回一个智能指针（封装了连接），因为智能指针能够出作用域自动析构，可以重定义其删除器归还连接，避免让用户自己调用函数将连接归还，简化用户操作</p><ul><li>加锁</li><li>连接池队列为空时，进入等待状态，并判断是否连接超时</li><li>连接池队列不空时，消费连接</li><li>通知生产者线程</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 消费者线程，提供给外部的接口，从连接池中获取一个可用的空闲连接</span><br><span class="hljs-function">shared_ptr&lt;Connection&gt; <span class="hljs-title">ConnectionPool::getConnection</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">unique_lock&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(queueMutex_)</span></span>;<br><br><span class="hljs-comment">// 连接池队列为空，消费者线程进入等待状态</span><br><span class="hljs-keyword">while</span> (connectionQue_.<span class="hljs-built_in">empty</span>()) &#123;<br>cv_status status = cv.<span class="hljs-built_in">wait_for</span>(lock, chrono::<span class="hljs-built_in">milliseconds</span>(connectionTimeout_)); <span class="hljs-comment">// 线程池有连接唤醒/超时唤醒</span><br><span class="hljs-keyword">if</span> (status == cv_status::timeout &amp;&amp; connectionQue_.<span class="hljs-built_in">empty</span>()) &#123; <span class="hljs-comment">// 超时唤醒</span><br><span class="hljs-built_in">LOG</span>(<span class="hljs-string">&quot;获取空闲连接超时...获取连接失败！&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* shared_ptr智能指针析构时，会把connection的资源delete，相当于调用connection的析构函数，connection就被close了</span><br><span class="hljs-comment">* 这里需要自定义shared_ptr的释放资源的方式，把connection直接归还到队列中</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 从连接池队列取出一个连接</span><br><span class="hljs-function">shared_ptr&lt;Connection&gt; <span class="hljs-title">sp</span><span class="hljs-params">(connectionQue_.front(),</span></span><br><span class="hljs-params"><span class="hljs-function">[&amp;](Connection* pcon) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-comment">// 这是在服务器应用线程中调用的</span></span></span><br><span class="hljs-params"><span class="hljs-function">unique_lock&lt;mutex&gt; lock(queueMutex_);</span></span><br><span class="hljs-params"><span class="hljs-function">connectionQue_.push(pcon);</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;)</span></span>;<br>connectionQue_.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-comment">// 通知生产者线程生产</span><br><span class="hljs-keyword">if</span> (connectionQue_.<span class="hljs-built_in">empty</span>()) &#123;<br>cv.<span class="hljs-built_in">notify_all</span>();<br>&#125;<br><span class="hljs-keyword">return</span> sp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定时清理连接线程"><a href="#定时清理连接线程" class="headerlink" title="定时清理连接线程"></a>定时清理连接线程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定时清理连接线程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConnectionPool::scannerConnectionTask</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (;;) &#123;<br><span class="hljs-comment">// 通过sleep模拟定时效果</span><br>this_thread::<span class="hljs-built_in">sleep_for</span>(chrono::<span class="hljs-built_in">seconds</span>(maxIdleTime_));<br><br><span class="hljs-comment">// 扫描整个队列，释放多余连接</span><br><span class="hljs-function">unique_lock&lt;mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(queueMutex_)</span></span>;<br><span class="hljs-keyword">while</span> (!connectionQue_.<span class="hljs-built_in">empty</span>()) &#123;<br>Connection* p = connectionQue_.<span class="hljs-built_in">front</span>();<br><span class="hljs-keyword">if</span> (connectionCnt_ &gt; initSize_ &amp;&amp; p-&gt;<span class="hljs-built_in">getAlivetime</span>() &gt;= maxIdleTime_ * <span class="hljs-number">1000</span>) &#123;<br>connectionQue_.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">delete</span> p;<br>connectionCnt_--;<br>&#125;<br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 队头连接没有超过最大空闲时间，其他连接肯定也没有</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在Linux下编译数据库连接池"><a href="#在Linux下编译数据库连接池" class="headerlink" title="在Linux下编译数据库连接池"></a>在Linux下编译数据库连接池</h2><p>将源文件和头文件放在一个文件夹下，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── Connection<span class="hljs-selector-class">.cpp</span><br>├── Connection<span class="hljs-selector-class">.h</span><br>├── ConnectionPool<span class="hljs-selector-class">.cpp</span><br>├── ConnectionPool<span class="hljs-selector-class">.h</span><br>├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span><br>├── mysql<span class="hljs-selector-class">.ini</span><br>└── public.h<br></code></pre></td></tr></table></figure><p>在终端执行g++指令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 进入ConnectionPool目录</span><br>cd ConnectionPool<br><span class="hljs-comment"># g++ -o 可执行文件名 源文件1/2/3... </span><br><span class="hljs-comment"># 指定头文件的位置（-I）、库文件的目录（-L）、库名（-l）</span><br><span class="hljs-comment"># mysql头文件路径（-I/usr/include/mysql） mysql库文件路径（-L/usr/lib/x86_64-linux-gnu） 库名（-lmysqlclient）</span><br>g++ -o ConnectionPool Connection.cpp ConnectionPool.cpp main.cpp -I<span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/mysql -L/u</span>sr<span class="hljs-regexp">/lib/</span>x86_64-linux-gnu -lmysqlclient -lpthread<br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./ConnectionPool</span><br></code></pre></td></tr></table></figure><h2 id="Linux动态库"><a href="#Linux动态库" class="headerlink" title="Linux动态库"></a>Linux动态库</h2><p><strong>动态库的工作原理</strong></p><ul><li>静态库：GCC 进行链接时，会把静态库中代码打包到可执行程序中</li><li>动态库：GCC 进行链接时，动态库的代码不会被打包到可执行程序中（会记录动态库的信息）</li><li><strong>动态库在程序运行时动态载入内存，当程序用到了动态库的哪个api，动态载入器会去寻找动态库文件放到内存里面</strong></li><li>可以通过ldd （list dynamic dependencies）命令检查动态库依赖关系</li></ul><p><strong>如何定位共享文件？</strong></p><ul><li>当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是<strong>还需要知道绝对路径</strong></li><li>系统的<strong>动态载入器来获取该绝对路径</strong></li><li>对于elf格式的可执行程序，是由<strong>ld-linux.so（动态载入器）</strong>来完成的，它先后搜索elf文件的 DT_RPATH段（无法修改） ——&gt; 环境变量LD_LIBRARY_PATH ——&gt; &#x2F;etc&#x2F;ld.so.cache文件列表 ——&gt; &#x2F;lib&#x2F;，&#x2F;usr&#x2F;lib目录找到库文件后将其载入内存。</li></ul><p><strong>数据库连接池动态库的生成</strong></p><p>生成.o的二进制目标文件，得到与位置无关的代码：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># -fPIC 选项表示生成位置无关</span><br>g<span class="hljs-operator">+</span><span class="hljs-operator">+</span> <span class="hljs-operator">-</span><span class="hljs-built_in">c</span> <span class="hljs-operator">-</span>fPIC Connection.cpp ConnectionPool.cpp<br></code></pre></td></tr></table></figure><p>生成动态库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">g++ -shared Connection<span class="hljs-selector-class">.o</span> ConnectionPool<span class="hljs-selector-class">.o</span> -o libconpool.so<br></code></pre></td></tr></table></figure><p>配置动态载入器加载路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 修改<span class="hljs-regexp">/etc/</span>ld.so.conf <br>sudo vim <span class="hljs-regexp">/etc/</span>ld.so.conf<br><span class="hljs-regexp">//</span> 添加路径<br><span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/workspace/</span>lib<br><span class="hljs-regexp">//</span> 使其生效<br>sudo ldconfig<br></code></pre></td></tr></table></figure><p>编译链接程序：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">g++ -o conn main.cpp -L<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/workspace/</span>lib -lconpool -pthread -I<span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/mysql -L/u</span>sr<span class="hljs-regexp">/lib/</span>x86_64-linux-gnu -lmysqlclient -lpthread<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./conn<br></code></pre></td></tr></table></figure><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><table><thead><tr><th align="center">数据量</th><th align="center">未使用连接池花费的时间</th><th align="center">使用连接池花费的时间</th></tr></thead><tbody><tr><td align="center">1000</td><td align="center">单线程：0.85s 四线程：0.73</td><td align="center">单线程：0.06 四线程：0.04</td></tr><tr><td align="center">5000</td><td align="center">单线程：4.13s 四线程：3.72</td><td align="center">单线程：0.23 四线程：0.16</td></tr><tr><td align="center">10000</td><td align="center">单线程：8.36s 四线程：7.56</td><td align="center">单线程：0.44 四线程：0.3</td></tr></tbody></table><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在windows下能够正常运行，但是在linux下连接服务器上数据库报错‘@’localhost’ (using password: YES) - Access denied for user ‘root。排查了密码和权限都没问题，最后发现是因为<strong>Linux和Unix使用的换行符是’\n’，而Windows使用的是’\r\n’</strong>。在windows下，std::getline() 函数默认会将\r\n视为换行符，因此它会读取整个行，但会忽略掉 \r。而在Linux中，std::getline 仅将\n视为换行符，因此在读取到换行符时，\r 会作为普通字符一起读入。</p><p>在加载配置文件函数中增加去除’&#x2F;r’的逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 去除空格和&#x27;\r&#x27;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; line.<span class="hljs-built_in">size</span>(); i++) &#123;<br>    <span class="hljs-keyword">if</span>(line[i]==<span class="hljs-string">&#x27; &#x27;</span> || line[i]==<span class="hljs-string">&#x27;\r&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>    str += line[i];<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>TIP：GitHub链接：<a href="https://github.com/ZHCANO/ConnectionPool">https://github.com/ZHCANO/ConnectionPool</a></p>          </div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://juejin.cn/post/7141190286838857735">https://juejin.cn/post/7141190286838857735</a></p></li><li><p><a href="https://open.alipay.com/portal/forum/post/126001176">https://open.alipay.com/portal/forum/post/126001176</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Linux</tag>
      
      <tag>数据库</tag>
      
      <tag>连接池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeanCloud+Hexo开启评论和文章阅读量</title>
    <link href="/LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/"/>
    <url>/LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前面我们已经完成了<a href="http://zhcan.online/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">hexo博客的搭建并成功部署到服务器和GitHub Pages</a>，但还没有实现开启评论和文章访问量的功能。因为我开始搭建博客时，按照网上的教程都没有成功实现，于是这一部分功能就被我推迟了，下面分享我的踩坑经历，操作步骤可能存在冗余，但是因为时间有限，就没有逐一验证哪些是不必要的操作。</p></blockquote><h2 id="1-注册LeanCloud"><a href="#1-注册LeanCloud" class="headerlink" title="1. 注册LeanCloud"></a>1. 注册LeanCloud</h2><p>(1) 前往LeanCloud官网完成注册：<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a></p><p>(2) 点击创建应用，填写应用名称，完成创建</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228183108135.png"></p><p>(3) 点击创建好的应用-&gt;设置-&gt;应用凭证</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228183337341.png"></p><p>此处的AppID、AppKey和REST API在后面会用到。</p><h2 id="2-开启评论功能"><a href="#2-开启评论功能" class="headerlink" title="2. 开启评论功能"></a>2. 开启评论功能</h2><p>(1) 打开主题配置文件_config.yml，搜索<code>Comment</code>，修改<code>enable</code>和<code>type</code>。</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228183740993.png"></p><p>(2) 搜索<code>valine</code>，将前面提到的<code>AppID</code>和<code>AppKey</code>粘贴到这里</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228183857864.png"></p><div class="note note-success">            <p>TIP：这里参考【<a href="https://www.jianshu.com/p/0b4cf14663f7">hexo添加评论功能</a>】增加了多个版本的appId和appKey。</p>          </div><p>(3) 如果有域名，可以在安全中心添加域名。</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228184305009.png"></p><p>重新启动hexo，如果文章底部出现了评论区，就说明部署成功了。</p><p>(4) 点击数据存储-&gt;结构化数据库-&gt;Comment，可以管理评论区的评论。</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228184523762.png"></p><div class="note note-success">            <p>TIP：我关闭了评论功能，因为开启评论公安备案似乎要选交互式。</p>          </div><h2 id="3-开启网页-文章阅读量、访问量统计"><a href="#3-开启网页-文章阅读量、访问量统计" class="headerlink" title="3. 开启网页&#x2F;文章阅读量、访问量统计"></a>3. 开启网页&#x2F;文章阅读量、访问量统计</h2><p>(1) 网页访问统计</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228185018320.png"></p><p>(2) 点击数据存储-&gt;结构化数据库-&gt;创建Class，填写Class名称为Counter（必须为Counter），选择无限制，创建。</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228190605438.png"></p><p>后续网站的访问次数都会自动保存在Counter中。</p><p>(3) 填写<code>AppID</code>、<code>AppKey</code>和<code>server_url</code></p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228185224919.png" alt="i"></p><p>(3) PV与UV统计</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228185322644.png"></p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228185524697.png"></p><div class="note note-success">            <p>TIP：<code>{}</code>中间不要有空格。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br><span class="hljs-symbol">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人</span><br></code></pre></td></tr></table></figure>          </div><p>重新启动hexo，如果出现了在页头和页尾出现了访问次数，那么说明设置成功了，例如：</p><p><img src="/./LeanCloud+Hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E5%92%8C%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F/image-20231228185820048.png"></p><div class="note note-success">            <p>TIP：本机访问网页也会使访问次数加1，可以将<code>LeanCloud</code>的<code>ignore_local</code>设置为<code>true</code>避免本地访问导致次数增加，上图就是开启后的效果。如果没有开启这个功能，本地访问这个页面一次，计数值就会加1。</p>          </div><p>到这里，就完成了评论功能和浏览量功能的设置，如果浏览量还是无法正常显示，可以在主题配置文件_config.yml搜索LeanCloud查找是否遗漏的设置。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/0b4cf14663f7">hexo添加评论功能</a></li><li><a href="https://blog.csdn.net/qq_34243930/article/details/109046865">用Github Pages+Hexo搭建博客之(八)Hexo博客Next主题添加统计文章阅读量（访问量&#x2F;浏览量&#x2F;阅读次数）功能</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>LeanCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub Pages+服务器搭建个人网站</title>
    <link href="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-GitHub账号"><a href="#1-1-GitHub账号" class="headerlink" title="1.1 GitHub账号"></a>1.1 GitHub账号</h3><ul><li>注册GitHub账号</li><li>GitHub官网：<a href="https://github.com/">https://github.com/</a></li></ul><h3 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h3><ul><li><p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></li><li><p>安装方式：双击安装包，一直点next</p></li></ul><p>安装完成后，鼠标右键任意位置，在右键菜单中选择<code>Git Bash Here</code>，弹出Git命令行，在命令行配置Git用户名和邮箱地址，以便区分不同提交者的身份。（<strong>注意：这里设置用户签名和将来登录GitHub的账号没有任何关系</strong>）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 配置Git用户名和邮箱地址</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;邮箱&quot;</span><br><span class="hljs-comment">// 查看配置</span><br>cat ~/.gitconfig<br></code></pre></td></tr></table></figure><h3 id="1-3-安装Node-JS"><a href="#1-3-安装Node-JS" class="headerlink" title="1.3 安装Node JS"></a>1.3 安装Node JS</h3><ul><li><p>下载地址：<a href="https://nodejs.cn/download/">https://nodejs.cn/download/</a></p></li><li><p>安装方式：双击安装包，一直点next</p></li><li><p>安装完成后，打开cmd，输入<code>node -v</code>和<code>npm -v</code>，若显示对应版本号，则说明安装成功。</p></li></ul><p><strong>(1) 修改全局模块路径和缓存路径</strong></p><p>输入<code>npm -root -g</code>查看默认路径，默认路径在<code>C:\Users\用户名\AppData\Roaming\npm\node_modules</code>。</p><div class="note note-success">            <p>TIP：此文件夹默认是隐藏的，需要设置显示隐藏的文件夹才能查看</p>          </div><p><strong>(2) 在nodejs安装目录中新建node_cache和node_global文件夹</strong></p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231228115317381.png"></p><p><strong>(3) 修改全局模块路径和缓存路径为新建的这两个文件夹</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span><span class="hljs-built_in"> prefix </span><span class="hljs-string">&quot;创建的node_global文件夹所在路径&quot;</span><br>npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;创建的node_cache文件夹所在路径&quot;</span><br></code></pre></td></tr></table></figure><p><strong>(4) 修改完成后，配置环境变量，右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</strong></p><ol><li>在用户环境变量Path中添加node_global的路径</li><li>在系统变量中，新建变量名NODE_PATH，变量值为node_global的node_modules文件夹路径。</li></ol><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h2><p><strong>(1) 运行Git Bash并切换淘宝镜像（提高下载速度）</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 全局切换命令</span><br>npm config set registry http:<span class="hljs-comment">//registry.npm.taobao.org/</span><br><span class="hljs-comment">// 查看版本命令</span><br>npm get registry<br><span class="hljs-comment">// 切回官方镜像</span><br>npm config set registry http:<span class="hljs-comment">//www.npmjs.org</span><br></code></pre></td></tr></table></figure><p><strong>(2) 安装Hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p><strong>npm install 报错：</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ npm install hexo-<span class="hljs-keyword">cli</span> -<span class="hljs-keyword">g</span><br>npm <span class="hljs-keyword">ERR</span>! code EPERM<br>npm <span class="hljs-keyword">ERR</span>! syscall <span class="hljs-keyword">mkdir</span><br>npm <span class="hljs-keyword">ERR</span>! path <span class="hljs-keyword">D</span>:\DevelopTools\nodejs\node_global\node_modules<br>npm <span class="hljs-keyword">ERR</span>! errno -4048<br>npm <span class="hljs-keyword">ERR</span>! <span class="hljs-keyword">Error</span>: EPERM: operation not permitted, <span class="hljs-keyword">mkdir</span> &#x27;<span class="hljs-keyword">D</span>:\DevelopTools\nodejs\node_global\node_modules&#x27;<br></code></pre></td></tr></table></figure><p><strong>解决方法：找到缓存位置，设置nodejs文件夹权限为完全控制</strong></p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231228115706989.png"></p><p><strong>(3) 创建hexo-blog项目</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hexo init hexo-<span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd hexo-<span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p><strong>(4) 本地启动</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>此时，在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以访问到hexo的默认页面了</p><h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h2><p><strong>1. 按照官方文档安装Fluid主题：<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a></strong></p><p><strong>2. 按照官方配置指南完成自己想要的配置：<a href="https://hexo.fluid-dev.com/docs/guide/">配置指南</a></strong></p><h2 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4. 创建文章"></a>4. 创建文章</h2><p>修改hexo-blog目录下_config.yml，在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>1. 创建各种页</strong></p><p>(1) 关于页：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about <span class="hljs-meta"># 在hexo-blog/source/about目录下生成index.md</span><br></code></pre></td></tr></table></figure><p>编辑<code>index.md</code>，添加<code>layout: about</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-11-08 11:51:44</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>(2) 分类页：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about categories<br></code></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: categories<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span> <span class="hljs-number">18</span>:<span class="hljs-number">26</span>:<span class="hljs-number">53</span><br><span class="hljs-attribute">type</span>: <span class="hljs-string">&quot;categories&quot;</span><br></code></pre></td></tr></table></figure><p>(3) 标签页：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about tags<br></code></pre></td></tr></table></figure><p>添加<code>type: &quot;tags&quot;</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: tags<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span> <span class="hljs-number">18</span>:<span class="hljs-number">32</span>:<span class="hljs-number">39</span><br><span class="hljs-attribute">type</span>: <span class="hljs-string">&quot;tags&quot;</span><br></code></pre></td></tr></table></figure><p><strong>2. 创建文章</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> 测试文章 <span class="hljs-meta">#在hexo-blog/source/_posts目录下生成测试文章.md和同名文件夹</span><br></code></pre></td></tr></table></figure><p>打开测试文章.md，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">测试文章</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/post.png</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-11-08 12:01:42</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">C++</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">C++</span><br><span class="hljs-meta">---</span><br><span class="hljs-type">![](./</span><span class="hljs-string">测试文章/test.png)</span><br><span class="hljs-string">这是一篇测试文章</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>TIP：banner_img: &#x2F;img&#x2F;post.png是自定义的文章顶部背景图片的路径，categories:是类别，tags:是标签。</p>          </div><p><strong>配置在Hexo博客和Markdown编辑器中正确显示图片：</strong></p><p>首先，根据Hexo官方文档，在_config.yaml将post_asset_folder选项设为true 。然后，安装插件hexo-image-link，安装命令为：</p><pre><code class="hljs">npm install hexo-image-link --save</code></pre><p>如果安装了 hexo-asset-img 插件，需要将其卸载：</p><pre><code class="hljs">$ npm uninstall --save hexo-asset-img</code></pre><p>配置向Typora文档粘贴图片时自动保存图片到同名文件夹：</p><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231224153239095.png"></p><div class="note note-success">            <p>TIP</p><p>粘贴后不要缩放图片，会导致路径不可用，必须保证图片的路径格式为<code>![]()</code></p><p>如果希望图片居中显示，可以卸载 hexo-image-link</p>          </div><h2 id="5-将hexo推送到GitHub-Pages"><a href="#5-将hexo推送到GitHub-Pages" class="headerlink" title="5.  将hexo推送到GitHub Pages"></a>5.  将hexo推送到GitHub Pages</h2><p><strong>1. 在GitHub上创建仓库</strong></p><p>可参考<a href="https://princehao.cn/posts/blog001/">这篇博客的配置GitHubPages部分</a>，注意仓库名必须为<code>你的用户名.github.io</code></p><p><strong>2. Github配置ssh key</strong></p><p>原理：本地生成一个公私钥对，将公钥放到远程主机，当本地主机需要登录远程主机时，远程主机用公钥对对一个随机字符串加密，并将结果发回本地主机。本地主机用私钥解密，将内容发回到远程主机，远程主机对比传回的字符串与生成的字符串，如果相同则认证成功。（公钥可以理解为锁，私钥是钥匙）</p><p>(1) 打开git bash，生成ssh key</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa   <span class="hljs-comment">// 生成公钥</span><br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub <span class="hljs-comment">// 复制公钥</span><br></code></pre></td></tr></table></figure><p>(2) Github账号上添加公钥</p><p>点击settings-&gt;SSH and GPG kyes-&gt;new ssh key，将刚刚生成的公钥粘贴进去</p><p>(3) 验证设置是否成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231225155759193.png"></p><p><strong>3. 将本地博客部署到GitHub Pages</strong></p><p>打开hexo-blog&#x2F;_config.yml，在deployment配置项下设置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> 此处复制仓库的SSH地址，如下图<br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p><img src="/./%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20231225201809703.png"></p><p>git bash输入<code>hexo d</code></p><p>浏览器访问<code>https://zhcano.github.io/</code>，显示页面则部署成功。</p><h2 id="6-配置域名"><a href="#6-配置域名" class="headerlink" title="6. 配置域名"></a>6. 配置域名</h2><p><strong>1. 购买域名和服务器</strong></p><p>(1) 在腾讯云&#x2F;阿里云（下面以腾讯云为例）购买一个轻量级服务器，最便宜的大概200+</p><p>(2) 在腾讯云购买一个域名，最便宜的大概10元左右</p><p><strong>2. 国内网站需要ICP域名备案</strong></p><p>参考链接：<a href="https://blog.csdn.net/qq_62982856/article/details/133307488">域名备案流程（个人备案，腾讯云 &#x2F; 阿里云）</a></p><p>大概流程是：提交备案材料-&gt;腾讯云审核-&gt;管局审核-&gt;公安备案</p><div class="note note-success">            <p>TIP：必须先备案再域名解析，否则腾讯云会打电话通知删除域名解析。</p>          </div><p><strong>3. 域名解析</strong></p><p>参考链接：<a href="https://cloud.tencent.com/document/product/302/3446">云解析 DNS 快速添加域名解析-快速入门-文档中心-腾讯云 (tencent.com)</a></p><h2 id="7-将hexo推送到云服务器"><a href="#7-将hexo推送到云服务器" class="headerlink" title="7. 将hexo推送到云服务器"></a>7. 将hexo推送到云服务器</h2><p><strong>1. xshell远程连接服务器</strong></p><p><strong>2. 安装git和nginx</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">apt-get install nginx<br>apt-get install git<br></code></pre></td></tr></table></figure><p><strong>3. 添加git用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser git   <span class="hljs-comment">#添加git用户</span><br><span class="hljs-built_in">chmod</span> 740 /etc/sudoers   <span class="hljs-comment">#改变sudoers文件的权限为文件所有者可写</span><br>vim /etc/sudoers   <br></code></pre></td></tr></table></figure><p>找到root ALL&#x3D;(ALL) ALL，在它下方加入一行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>) <span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 400 /etc/sudoers   <span class="hljs-comment">#将其权限修改为文件所有者可读</span><br>sudo passwd git  <span class="hljs-comment">#设置git用户的密码</span><br></code></pre></td></tr></table></figure><p><strong>4. 给git用户添加ssh密钥</strong></p><p>使用<code>五、将本地博客部署到GitHub Pages</code>中生成的密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">su git <span class="hljs-comment">#切换到git用户</span><br><span class="hljs-built_in">mkdir</span> ~/.ssh  <span class="hljs-comment">#创建.ssh文件夹</span><br><span class="hljs-built_in">touch</span> ~/.ssh/authorized_keys  <span class="hljs-comment">#创建authorized_keys文件</span><br><span class="hljs-built_in">chmod</span> 600 ~/.ssh/authorized_keys  <span class="hljs-comment">#为authorized_keys文件赋予文件所有者可读可写的权限</span><br><span class="hljs-built_in">chmod</span> 700 ~/.ssh  <span class="hljs-comment">#为.ssh文件夹赋予文件夹所有者可读可写可执行的权限</span><br>vim ~/.ssh/authorized_keys <span class="hljs-comment">#将ssh密钥粘贴进去</span><br></code></pre></td></tr></table></figure><p>测试在Git Bash中使用<code>ssh git@你的服务器地址</code>连接服务器是否成功。</p><p><strong>5. 创建git仓库并使用git-hooks实现自动部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /var/repo <span class="hljs-comment"># 新建git仓库位置</span><br>sudo <span class="hljs-built_in">mkdir</span> /var/hexo <span class="hljs-comment"># 新建静态资源的目录</span><br><span class="hljs-built_in">cd</span> /var/repo<br>sudo git init --bare blog.git <span class="hljs-comment"># 创建一个名叫blog的仓库</span><br>sudo vim /var/repo/blog.git/hooks/post-update <span class="hljs-comment"># 配置hooks实现自动部署</span><br></code></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/var/hexo --git-dir=/var/repo/blog.git checkout -<br></code></pre></td></tr></table></figure><p>增加权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog.git/hooks/<br>sudo <span class="hljs-built_in">chown</span> -R git:git /var/repo/      <br>sudo <span class="hljs-built_in">chown</span> -R git:git /var/hexo         <br>sudo <span class="hljs-built_in">chmod</span> +x post-update<br></code></pre></td></tr></table></figure><p><strong>6. 配置nginx</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">// 查找 nginx 配置文件的路径<br>sudo nginx -t<br>输出：nginx: the configuration <span class="hljs-keyword">file</span> /etc/nginx/nginx.<span class="hljs-keyword">conf</span> <span class="hljs-keyword">syntax</span> <span class="hljs-keyword">is</span> ok<br><span class="hljs-keyword">cd</span> /etc/nginx/<br><span class="hljs-built_in">mkdir</span> vhost<br><span class="hljs-keyword">cd</span> vhost<br>sudo <span class="hljs-keyword">vim</span> blog.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span>&#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span> default_server;<br>        <span class="hljs-keyword">listen</span> [::]:<span class="hljs-number">80</span> default_server;<br>        root /var/hexo;<br>        server_name 域名; <br>        <span class="hljs-keyword">location</span> /&#123;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vim</span> /etc/nginx/nginx.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>在http模块下添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">include</span> <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/vhost/</span>*.conf;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>TIP：这里设置的80端口和nginx默认页面的80端口冲突，可以将nginx默认页面的80端口注释掉。</p>          </div><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cd /etc/nginx/sites-available<br>sudo vim <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-meta"># listen 80 default_server;</span><br>        <span class="hljs-meta"># listen [::]:80 default_server;</span><br>        ...<br></code></pre></td></tr></table></figure><p>重新加载Nginx：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl reload nginx</span><br></code></pre></td></tr></table></figure><p><strong>7. 给git用户设置权限</strong></p><p>避免git用户通过ssh git@ip登录，也不能通过su git切换到git用户。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo vim <span class="hljs-regexp">/etc/</span>passwd<br><span class="hljs-regexp">//</span> 修改最后一行<br><span class="hljs-regexp">//</span> 将<span class="hljs-regexp">/bin/</span>bash修改为<span class="hljs-regexp">/usr/</span>bin/git-shell<br></code></pre></td></tr></table></figure><p><strong>8. 本地hexo设置</strong></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment">#vim config.yml</span><br><span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: git</span><br>    <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">github仓库的SSH地址</span><br>    <span class="hljs-attribute">branch</span><span class="hljs-punctuation">:</span> <span class="hljs-string">main</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">type: git</span><br>    <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">git@你的ip:/var/repo/blog.git</span><br>    <span class="hljs-attribute">branch</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>hexo d 将本地博客推送至服务器和github，此时输入域名和输入github.io地址都能访问到自己博客了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程</a></li><li><a href="https://arcsin2.cloud/2023/02/23/Hexo-%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">Hexo 博客无法显示图片解决方法</a></li><li><a href="https://princehao.cn/posts/blog001/">Hexo+Fluid搭建个人博客网站</a></li><li><a href="https://zhuanlan.zhihu.com/p/453999928">结合 nginx + git 将 hexo 推送到云服务器</a></li><li><a href="https://zhuanlan.zhihu.com/p/83095214">通过Git将Hexo博客部署到服务器</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git和Github的使用</title>
    <link href="/Git%E4%B8%89%E5%89%91%E5%AE%A2/"/>
    <url>/Git%E4%B8%89%E5%89%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Git"><a href="#一、Git" class="headerlink" title="一、Git"></a>一、Git</h2><h3 id="1-Git安装"><a href="#1-Git安装" class="headerlink" title="1. Git安装"></a>1. Git安装</h3><ul><li><a href="https://git-scm.com/">https://git-scm.com/</a></li></ul><h3 id="2-Git-的工作机制"><a href="#2-Git-的工作机制" class="headerlink" title="2. Git 的工作机制"></a>2. Git 的工作机制</h3><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225185210032.png"></p><h3 id="3-Git的常用命令"><a href="#3-Git的常用命令" class="headerlink" title="3. Git的常用命令"></a>3. Git的常用命令</h3><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225185311115.png"></p><p><strong>查看签名：</strong>cat ~&#x2F;.gitconfig</p><p><strong>初始化本地库：</strong>git init</p><p><strong>查看本地库状态：</strong>git status</p><p><strong>新建文件（未追踪的文件，在工作区）：</strong></p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225190122095.png"></p><p><strong>添加暂存区：</strong>git add 文件名</p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225190256293.png"></p><p><strong>提交本地库：</strong>git commit -m “日志信息” 文件名</p><p><strong>修改文件：</strong></p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225190728610.png"></p><p><strong>查看版本号：</strong></p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225190947555.png"></p><p><strong>版本穿梭：</strong>git reset –hard 版本号</p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225191214074.png"></p><h3 id="4-Git分支操作"><a href="#4-Git分支操作" class="headerlink" title="4. Git分支操作"></a><strong>4. Git分支操作</strong></h3><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225191321323.png"></p><div class="note note-success">            <p>TIP: 创建的新的分支，会将主分支master的内容复制一份，之后切换到新的分支做修改</p>          </div><p><strong>合并分支：</strong></p><p>产生冲突的原因：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git 无法替我们决定使用哪一个。必须人为决定新代码内容。</p><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225192752113.png"></p><p><strong>解决冲突：</strong></p><ul><li><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p></li><li><p>特殊符号：&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p></li></ul><ul><li>添加到暂存区，重新提交（注意：此时使用 git commit 命令时不能带文件名）</li></ul><h2 id="二、GitHub"><a href="#二、GitHub" class="headerlink" title="二、GitHub"></a>二、GitHub</h2><h3 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1. 创建远程仓库"></a>1. 创建远程仓库</h3><p>(1) 点击GitHub首页右上角的“+”按钮，在弹出窗口选择“New respository”</p><p>(2) 输入仓库名，点击创建</p><h3 id="2-远程仓库操作"><a href="#2-远程仓库操作" class="headerlink" title="2. 远程仓库操作"></a>2. 远程仓库操作</h3><p><img src="/./Git%E4%B8%89%E5%89%91%E5%AE%A2/image-20231225193734395.png"></p><h3 id="3-GitHub免密登录"><a href="#3-GitHub免密登录" class="headerlink" title="3. GitHub免密登录"></a>3. GitHub免密登录</h3><p><strong>1. 在GitHub上创建仓库</strong></p><p>可参考<a href="https://princehao.cn/posts/blog001/">这篇博客的配置GitHubPages部分</a></p><p><strong>2. Github配置ssh key</strong></p><p>原理：本地生成一个公私钥对，将公钥放到远程主机，当本地主机需要登录远程主机时，远程主机用公钥对对一个随机字符串加密，并将结果发回本地主机。本地主机用私钥解密，将内容发回到远程主机，远程主机对比传回的字符串与生成的字符串，如果相同则认证成功。（公钥可以理解为锁，私钥是钥匙）</p><p>(1) 打开git bash，生成ssh key</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa   <span class="hljs-comment">// 生成公钥</span><br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub <span class="hljs-comment">// 复制公钥</span><br></code></pre></td></tr></table></figure><p>(2) Github账号上添加公钥</p><p>点击settings-&gt;SSH and GPG kyes-&gt;new ssh key，将刚刚生成的公钥粘贴进去</p><p>(3) 验证设置是否成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li>尚硅谷技术课程系列之 Git</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
